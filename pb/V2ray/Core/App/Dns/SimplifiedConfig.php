<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: app/dns/config.proto

namespace V2ray\Core\App\Dns;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>v2ray.core.app.dns.SimplifiedConfig</code>
 */
class SimplifiedConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * NameServer list used by this DNS client.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.dns.SimplifiedNameServer name_server = 5;</code>
     */
    private $name_server;
    /**
     * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     * (IPv6).
     *
     * Generated from protobuf field <code>string client_ip = 3;</code>
     */
    protected $client_ip = '';
    /**
     * Static domain-ip mapping in DNS server.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.dns.SimplifiedHostMapping static_hosts = 4;</code>
     */
    private $static_hosts;
    /**
     * Global fakedns object.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.fakedns.FakeDnsPoolMulti fake_dns = 16;</code>
     */
    protected $fake_dns = null;
    /**
     * Tag is the inbound tag of DNS client.
     *
     * Generated from protobuf field <code>string tag = 6;</code>
     */
    protected $tag = '';
    /**
     * Domain matcher to use
     *
     * Generated from protobuf field <code>string domain_matcher = 15;</code>
     */
    protected $domain_matcher = '';
    /**
     * DisableCache disables DNS cache
     * Deprecated. Use cache_strategy.
     *
     * Generated from protobuf field <code>bool disableCache = 8 [deprecated = true];</code>
     * @deprecated
     */
    protected $disableCache = false;
    /**
     * Deprecated. Use fallback_strategy.
     *
     * Generated from protobuf field <code>bool disableFallback = 10 [deprecated = true];</code>
     * @deprecated
     */
    protected $disableFallback = false;
    /**
     * Deprecated. Use fallback_strategy.
     *
     * Generated from protobuf field <code>bool disableFallbackIfMatch = 11 [deprecated = true];</code>
     * @deprecated
     */
    protected $disableFallbackIfMatch = false;
    /**
     * Default query strategy (IPv4, IPv6, or both) for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     */
    protected $query_strategy = 0;
    /**
     * Default cache strategy for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.CacheStrategy cache_strategy = 12;</code>
     */
    protected $cache_strategy = 0;
    /**
     * Default fallback strategy for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.FallbackStrategy fallback_strategy = 13;</code>
     */
    protected $fallback_strategy = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\V2ray\Core\App\Dns\SimplifiedNameServer>|\Google\Protobuf\Internal\RepeatedField $name_server
     *           NameServer list used by this DNS client.
     *     @type string $client_ip
     *           Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     *           (IPv6).
     *     @type array<\V2ray\Core\App\Dns\SimplifiedHostMapping>|\Google\Protobuf\Internal\RepeatedField $static_hosts
     *           Static domain-ip mapping in DNS server.
     *     @type \V2ray\Core\App\Dns\Fakedns\FakeDnsPoolMulti $fake_dns
     *           Global fakedns object.
     *     @type string $tag
     *           Tag is the inbound tag of DNS client.
     *     @type string $domain_matcher
     *           Domain matcher to use
     *     @type bool $disableCache
     *           DisableCache disables DNS cache
     *           Deprecated. Use cache_strategy.
     *     @type bool $disableFallback
     *           Deprecated. Use fallback_strategy.
     *     @type bool $disableFallbackIfMatch
     *           Deprecated. Use fallback_strategy.
     *     @type int $query_strategy
     *           Default query strategy (IPv4, IPv6, or both) for each name server.
     *     @type int $cache_strategy
     *           Default cache strategy for each name server.
     *     @type int $fallback_strategy
     *           Default fallback strategy for each name server.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\App\Dns\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * NameServer list used by this DNS client.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.dns.SimplifiedNameServer name_server = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getNameServer()
    {
        return $this->name_server;
    }

    /**
     * NameServer list used by this DNS client.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.dns.SimplifiedNameServer name_server = 5;</code>
     * @param array<\V2ray\Core\App\Dns\SimplifiedNameServer>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setNameServer($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \V2ray\Core\App\Dns\SimplifiedNameServer::class);
        $this->name_server = $arr;

        return $this;
    }

    /**
     * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     * (IPv6).
     *
     * Generated from protobuf field <code>string client_ip = 3;</code>
     * @return string
     */
    public function getClientIp()
    {
        return $this->client_ip;
    }

    /**
     * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     * (IPv6).
     *
     * Generated from protobuf field <code>string client_ip = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setClientIp($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_ip = $var;

        return $this;
    }

    /**
     * Static domain-ip mapping in DNS server.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.dns.SimplifiedHostMapping static_hosts = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getStaticHosts()
    {
        return $this->static_hosts;
    }

    /**
     * Static domain-ip mapping in DNS server.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.dns.SimplifiedHostMapping static_hosts = 4;</code>
     * @param array<\V2ray\Core\App\Dns\SimplifiedHostMapping>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setStaticHosts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \V2ray\Core\App\Dns\SimplifiedHostMapping::class);
        $this->static_hosts = $arr;

        return $this;
    }

    /**
     * Global fakedns object.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.fakedns.FakeDnsPoolMulti fake_dns = 16;</code>
     * @return \V2ray\Core\App\Dns\Fakedns\FakeDnsPoolMulti|null
     */
    public function getFakeDns()
    {
        return $this->fake_dns;
    }

    public function hasFakeDns()
    {
        return isset($this->fake_dns);
    }

    public function clearFakeDns()
    {
        unset($this->fake_dns);
    }

    /**
     * Global fakedns object.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.fakedns.FakeDnsPoolMulti fake_dns = 16;</code>
     * @param \V2ray\Core\App\Dns\Fakedns\FakeDnsPoolMulti $var
     * @return $this
     */
    public function setFakeDns($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\App\Dns\Fakedns\FakeDnsPoolMulti::class);
        $this->fake_dns = $var;

        return $this;
    }

    /**
     * Tag is the inbound tag of DNS client.
     *
     * Generated from protobuf field <code>string tag = 6;</code>
     * @return string
     */
    public function getTag()
    {
        return $this->tag;
    }

    /**
     * Tag is the inbound tag of DNS client.
     *
     * Generated from protobuf field <code>string tag = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setTag($var)
    {
        GPBUtil::checkString($var, True);
        $this->tag = $var;

        return $this;
    }

    /**
     * Domain matcher to use
     *
     * Generated from protobuf field <code>string domain_matcher = 15;</code>
     * @return string
     */
    public function getDomainMatcher()
    {
        return $this->domain_matcher;
    }

    /**
     * Domain matcher to use
     *
     * Generated from protobuf field <code>string domain_matcher = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setDomainMatcher($var)
    {
        GPBUtil::checkString($var, True);
        $this->domain_matcher = $var;

        return $this;
    }

    /**
     * DisableCache disables DNS cache
     * Deprecated. Use cache_strategy.
     *
     * Generated from protobuf field <code>bool disableCache = 8 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getDisableCache()
    {
        @trigger_error('disableCache is deprecated.', E_USER_DEPRECATED);
        return $this->disableCache;
    }

    /**
     * DisableCache disables DNS cache
     * Deprecated. Use cache_strategy.
     *
     * Generated from protobuf field <code>bool disableCache = 8 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setDisableCache($var)
    {
        @trigger_error('disableCache is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->disableCache = $var;

        return $this;
    }

    /**
     * Deprecated. Use fallback_strategy.
     *
     * Generated from protobuf field <code>bool disableFallback = 10 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getDisableFallback()
    {
        @trigger_error('disableFallback is deprecated.', E_USER_DEPRECATED);
        return $this->disableFallback;
    }

    /**
     * Deprecated. Use fallback_strategy.
     *
     * Generated from protobuf field <code>bool disableFallback = 10 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setDisableFallback($var)
    {
        @trigger_error('disableFallback is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->disableFallback = $var;

        return $this;
    }

    /**
     * Deprecated. Use fallback_strategy.
     *
     * Generated from protobuf field <code>bool disableFallbackIfMatch = 11 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getDisableFallbackIfMatch()
    {
        @trigger_error('disableFallbackIfMatch is deprecated.', E_USER_DEPRECATED);
        return $this->disableFallbackIfMatch;
    }

    /**
     * Deprecated. Use fallback_strategy.
     *
     * Generated from protobuf field <code>bool disableFallbackIfMatch = 11 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setDisableFallbackIfMatch($var)
    {
        @trigger_error('disableFallbackIfMatch is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->disableFallbackIfMatch = $var;

        return $this;
    }

    /**
     * Default query strategy (IPv4, IPv6, or both) for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @return int
     */
    public function getQueryStrategy()
    {
        return $this->query_strategy;
    }

    /**
     * Default query strategy (IPv4, IPv6, or both) for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setQueryStrategy($var)
    {
        GPBUtil::checkEnum($var, \V2ray\Core\App\Dns\QueryStrategy::class);
        $this->query_strategy = $var;

        return $this;
    }

    /**
     * Default cache strategy for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.CacheStrategy cache_strategy = 12;</code>
     * @return int
     */
    public function getCacheStrategy()
    {
        return $this->cache_strategy;
    }

    /**
     * Default cache strategy for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.CacheStrategy cache_strategy = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setCacheStrategy($var)
    {
        GPBUtil::checkEnum($var, \V2ray\Core\App\Dns\CacheStrategy::class);
        $this->cache_strategy = $var;

        return $this;
    }

    /**
     * Default fallback strategy for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.FallbackStrategy fallback_strategy = 13;</code>
     * @return int
     */
    public function getFallbackStrategy()
    {
        return $this->fallback_strategy;
    }

    /**
     * Default fallback strategy for each name server.
     *
     * Generated from protobuf field <code>.v2ray.core.app.dns.FallbackStrategy fallback_strategy = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setFallbackStrategy($var)
    {
        GPBUtil::checkEnum($var, \V2ray\Core\App\Dns\FallbackStrategy::class);
        $this->fallback_strategy = $var;

        return $this;
    }

}

