<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: app/proxyman/config.proto

namespace V2ray\Core\App\Proxyman;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>v2ray.core.app.proxyman.ReceiverConfig</code>
 */
class ReceiverConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * PortRange specifies the ports which the Receiver should listen on.
     *
     * Generated from protobuf field <code>.v2ray.core.common.net.PortRange port_range = 1;</code>
     */
    protected $port_range = null;
    /**
     * Listen specifies the IP address that the Receiver should listen on.
     *
     * Generated from protobuf field <code>.v2ray.core.common.net.IPOrDomain listen = 2;</code>
     */
    protected $listen = null;
    /**
     * Generated from protobuf field <code>.v2ray.core.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
     */
    protected $allocation_strategy = null;
    /**
     * Generated from protobuf field <code>.v2ray.core.transport.internet.StreamConfig stream_settings = 4;</code>
     */
    protected $stream_settings = null;
    /**
     * Generated from protobuf field <code>bool receive_original_destination = 5;</code>
     */
    protected $receive_original_destination = false;
    /**
     * Override domains for the given protocol.
     * Deprecated. Use sniffing_settings.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];</code>
     * @deprecated
     */
    private $domain_override;
    /**
     * Generated from protobuf field <code>.v2ray.core.app.proxyman.SniffingConfig sniffing_settings = 8;</code>
     */
    protected $sniffing_settings = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \V2ray\Core\Common\Net\PortRange $port_range
     *           PortRange specifies the ports which the Receiver should listen on.
     *     @type \V2ray\Core\Common\Net\IPOrDomain $listen
     *           Listen specifies the IP address that the Receiver should listen on.
     *     @type \V2ray\Core\App\Proxyman\AllocationStrategy $allocation_strategy
     *     @type \V2ray\Core\Transport\Internet\StreamConfig $stream_settings
     *     @type bool $receive_original_destination
     *     @type array<int>|\Google\Protobuf\Internal\RepeatedField $domain_override
     *           Override domains for the given protocol.
     *           Deprecated. Use sniffing_settings.
     *     @type \V2ray\Core\App\Proxyman\SniffingConfig $sniffing_settings
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\App\Proxyman\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * PortRange specifies the ports which the Receiver should listen on.
     *
     * Generated from protobuf field <code>.v2ray.core.common.net.PortRange port_range = 1;</code>
     * @return \V2ray\Core\Common\Net\PortRange|null
     */
    public function getPortRange()
    {
        return $this->port_range;
    }

    public function hasPortRange()
    {
        return isset($this->port_range);
    }

    public function clearPortRange()
    {
        unset($this->port_range);
    }

    /**
     * PortRange specifies the ports which the Receiver should listen on.
     *
     * Generated from protobuf field <code>.v2ray.core.common.net.PortRange port_range = 1;</code>
     * @param \V2ray\Core\Common\Net\PortRange $var
     * @return $this
     */
    public function setPortRange($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\Common\Net\PortRange::class);
        $this->port_range = $var;

        return $this;
    }

    /**
     * Listen specifies the IP address that the Receiver should listen on.
     *
     * Generated from protobuf field <code>.v2ray.core.common.net.IPOrDomain listen = 2;</code>
     * @return \V2ray\Core\Common\Net\IPOrDomain|null
     */
    public function getListen()
    {
        return $this->listen;
    }

    public function hasListen()
    {
        return isset($this->listen);
    }

    public function clearListen()
    {
        unset($this->listen);
    }

    /**
     * Listen specifies the IP address that the Receiver should listen on.
     *
     * Generated from protobuf field <code>.v2ray.core.common.net.IPOrDomain listen = 2;</code>
     * @param \V2ray\Core\Common\Net\IPOrDomain $var
     * @return $this
     */
    public function setListen($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\Common\Net\IPOrDomain::class);
        $this->listen = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
     * @return \V2ray\Core\App\Proxyman\AllocationStrategy|null
     */
    public function getAllocationStrategy()
    {
        return $this->allocation_strategy;
    }

    public function hasAllocationStrategy()
    {
        return isset($this->allocation_strategy);
    }

    public function clearAllocationStrategy()
    {
        unset($this->allocation_strategy);
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
     * @param \V2ray\Core\App\Proxyman\AllocationStrategy $var
     * @return $this
     */
    public function setAllocationStrategy($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\App\Proxyman\AllocationStrategy::class);
        $this->allocation_strategy = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.transport.internet.StreamConfig stream_settings = 4;</code>
     * @return \V2ray\Core\Transport\Internet\StreamConfig|null
     */
    public function getStreamSettings()
    {
        return $this->stream_settings;
    }

    public function hasStreamSettings()
    {
        return isset($this->stream_settings);
    }

    public function clearStreamSettings()
    {
        unset($this->stream_settings);
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.transport.internet.StreamConfig stream_settings = 4;</code>
     * @param \V2ray\Core\Transport\Internet\StreamConfig $var
     * @return $this
     */
    public function setStreamSettings($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\Transport\Internet\StreamConfig::class);
        $this->stream_settings = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool receive_original_destination = 5;</code>
     * @return bool
     */
    public function getReceiveOriginalDestination()
    {
        return $this->receive_original_destination;
    }

    /**
     * Generated from protobuf field <code>bool receive_original_destination = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setReceiveOriginalDestination($var)
    {
        GPBUtil::checkBool($var);
        $this->receive_original_destination = $var;

        return $this;
    }

    /**
     * Override domains for the given protocol.
     * Deprecated. Use sniffing_settings.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     * @deprecated
     */
    public function getDomainOverride()
    {
        @trigger_error('domain_override is deprecated.', E_USER_DEPRECATED);
        return $this->domain_override;
    }

    /**
     * Override domains for the given protocol.
     * Deprecated. Use sniffing_settings.
     *
     * Generated from protobuf field <code>repeated .v2ray.core.app.proxyman.KnownProtocols domain_override = 7 [deprecated = true];</code>
     * @param array<int>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     * @deprecated
     */
    public function setDomainOverride($var)
    {
        @trigger_error('domain_override is deprecated.', E_USER_DEPRECATED);
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, \V2ray\Core\App\Proxyman\KnownProtocols::class);
        $this->domain_override = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.app.proxyman.SniffingConfig sniffing_settings = 8;</code>
     * @return \V2ray\Core\App\Proxyman\SniffingConfig|null
     */
    public function getSniffingSettings()
    {
        return $this->sniffing_settings;
    }

    public function hasSniffingSettings()
    {
        return isset($this->sniffing_settings);
    }

    public function clearSniffingSettings()
    {
        unset($this->sniffing_settings);
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.app.proxyman.SniffingConfig sniffing_settings = 8;</code>
     * @param \V2ray\Core\App\Proxyman\SniffingConfig $var
     * @return $this
     */
    public function setSniffingSettings($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\App\Proxyman\SniffingConfig::class);
        $this->sniffing_settings = $var;

        return $this;
    }

}

