<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: proxy/shadowsocks/simplified/config.proto

namespace V2ray\Core\Proxy\Shadowsocks\Simplified;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>v2ray.core.proxy.shadowsocks.simplified.ServerConfig</code>
 */
class ServerConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.v2ray.core.proxy.shadowsocks.simplified.CipherTypeWrapper method = 1;</code>
     */
    protected $method = null;
    /**
     * Generated from protobuf field <code>string password = 2;</code>
     */
    protected $password = '';
    /**
     * Generated from protobuf field <code>.v2ray.core.common.net.NetworkList networks = 3;</code>
     */
    protected $networks = null;
    /**
     * Generated from protobuf field <code>.v2ray.core.net.packetaddr.PacketAddrType packet_encoding = 4;</code>
     */
    protected $packet_encoding = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \V2ray\Core\Proxy\Shadowsocks\Simplified\CipherTypeWrapper $method
     *     @type string $password
     *     @type \V2ray\Core\Common\Net\NetworkList $networks
     *     @type int $packet_encoding
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proxy\Shadowsocks\Simplified\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.proxy.shadowsocks.simplified.CipherTypeWrapper method = 1;</code>
     * @return \V2ray\Core\Proxy\Shadowsocks\Simplified\CipherTypeWrapper|null
     */
    public function getMethod()
    {
        return $this->method;
    }

    public function hasMethod()
    {
        return isset($this->method);
    }

    public function clearMethod()
    {
        unset($this->method);
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.proxy.shadowsocks.simplified.CipherTypeWrapper method = 1;</code>
     * @param \V2ray\Core\Proxy\Shadowsocks\Simplified\CipherTypeWrapper $var
     * @return $this
     */
    public function setMethod($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\Proxy\Shadowsocks\Simplified\CipherTypeWrapper::class);
        $this->method = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string password = 2;</code>
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Generated from protobuf field <code>string password = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPassword($var)
    {
        GPBUtil::checkString($var, True);
        $this->password = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.common.net.NetworkList networks = 3;</code>
     * @return \V2ray\Core\Common\Net\NetworkList|null
     */
    public function getNetworks()
    {
        return $this->networks;
    }

    public function hasNetworks()
    {
        return isset($this->networks);
    }

    public function clearNetworks()
    {
        unset($this->networks);
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.common.net.NetworkList networks = 3;</code>
     * @param \V2ray\Core\Common\Net\NetworkList $var
     * @return $this
     */
    public function setNetworks($var)
    {
        GPBUtil::checkMessage($var, \V2ray\Core\Common\Net\NetworkList::class);
        $this->networks = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.net.packetaddr.PacketAddrType packet_encoding = 4;</code>
     * @return int
     */
    public function getPacketEncoding()
    {
        return $this->packet_encoding;
    }

    /**
     * Generated from protobuf field <code>.v2ray.core.net.packetaddr.PacketAddrType packet_encoding = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setPacketEncoding($var)
    {
        GPBUtil::checkEnum($var, \V2ray\Core\Net\Packetaddr\PacketAddrType::class);
        $this->packet_encoding = $var;

        return $this;
    }

}

